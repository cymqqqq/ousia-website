{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = secp256k1_1.ecdsaSign(msgHash, privateKey),\n      signature = _a.signature,\n      recovery = _a.recid;\n\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n\n  var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = types_1.toType(v, types_1.TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n\n  var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  var rec = new bn_js_1.default(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * @returns Signature\n */\n\n\nexports.toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var vn = types_1.toType(v, types_1.TypeOutput.Number);\n  var ss = s;\n\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(ss, 32)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig);\n  var r;\n  var s;\n  var v;\n\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bytes_1.bufferToInt(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bytes_1.bufferToInt(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  } // support both versions of `eth_sign` responses\n\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new bn_js_1.default(r);\n  var sBN = new bn_js_1.default(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  helpers_1.assertIsBuffer(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};","map":{"version":3,"mappings":"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","names":["ecsign","msgHash","privateKey","chainId","secp256k1_1","signature","recovery","r","Buffer","from","slice","s","Number","isSafeInteger","Error","v_1","v","chainIdBN","types_1","BN","muln","addn","toArrayLike","exports","calculateSigRecovery","vBN","subn","sub","isValidSigRecovery","rec","bn_js_1","eqn","concat","bytes_1","senderPubKey","toNumber","vn","ss","sig","buf","length","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","helpers_1","prefix","toString","hash_1"],"sourceRoot":"","sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}