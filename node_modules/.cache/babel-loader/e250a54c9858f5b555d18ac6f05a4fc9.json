{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nvar Account =\n/** @class */\nfunction () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account(nonce, balance, stateRoot, codeHash) {\n    if (nonce === void 0) {\n      nonce = new bn_js_1.default(0);\n    }\n\n    if (balance === void 0) {\n      balance = new bn_js_1.default(0);\n    }\n\n    if (stateRoot === void 0) {\n      stateRoot = constants_1.KECCAK256_RLP;\n    }\n\n    if (codeHash === void 0) {\n      codeHash = constants_1.KECCAK256_NULL;\n    }\n\n    this.nonce = nonce;\n    this.balance = balance;\n    this.stateRoot = stateRoot;\n    this.codeHash = codeHash;\n\n    this._validate();\n  }\n\n  Account.fromAccountData = function (accountData) {\n    var nonce = accountData.nonce,\n        balance = accountData.balance,\n        stateRoot = accountData.stateRoot,\n        codeHash = accountData.codeHash;\n    return new Account(nonce ? new bn_js_1.default(bytes_1.toBuffer(nonce)) : undefined, balance ? new bn_js_1.default(bytes_1.toBuffer(balance)) : undefined, stateRoot ? bytes_1.toBuffer(stateRoot) : undefined, codeHash ? bytes_1.toBuffer(codeHash) : undefined);\n  };\n\n  Account.fromRlpSerializedAccount = function (serialized) {\n    var values = rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array');\n    }\n\n    return this.fromValuesArray(values);\n  };\n\n  Account.fromValuesArray = function (values) {\n    var _a = __read(values, 4),\n        nonce = _a[0],\n        balance = _a[1],\n        stateRoot = _a[2],\n        codeHash = _a[3];\n\n    return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);\n  };\n\n  Account.prototype._validate = function () {\n    if (this.nonce.lt(new bn_js_1.default(0))) {\n      throw new Error('nonce must be greater than zero');\n    }\n\n    if (this.balance.lt(new bn_js_1.default(0))) {\n      throw new Error('balance must be greater than zero');\n    }\n\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32');\n    }\n\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32');\n    }\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n\n\n  Account.prototype.raw = function () {\n    return [types_1.bnToUnpaddedBuffer(this.nonce), types_1.bnToUnpaddedBuffer(this.balance), this.stateRoot, this.codeHash];\n  };\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n\n\n  Account.prototype.serialize = function () {\n    return rlp.encode(this.raw());\n  };\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n\n\n  Account.prototype.isContract = function () {\n    return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n\n\n  Account.prototype.isEmpty = function () {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n  };\n\n  return Account;\n}();\n\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\n\nexports.isValidAddress = function (hexAddress) {\n  try {\n    helpers_1.assertIsString(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\n\n\nexports.toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  helpers_1.assertIsHexString(hexAddress);\n  var address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();\n  var prefix = '';\n\n  if (eip1191ChainId) {\n    var chainId = types_1.toType(eip1191ChainId, types_1.TypeOutput.BN);\n    prefix = chainId.toString() + '0x';\n  }\n\n  var hash = hash_1.keccakFromString(prefix + address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\n\n\nexports.isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return exports.isValidAddress(hexAddress) && exports.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\n\n\nexports.generateAddress = function (from, nonce) {\n  helpers_1.assertIsBuffer(from);\n  helpers_1.assertIsBuffer(nonce);\n  var nonceBN = new bn_js_1.default(nonce);\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return hash_1.rlphash([from, null]).slice(-20);\n  } // Only take the lower 160bits of the hash\n\n\n  return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\n\n\nexports.generateAddress2 = function (from, salt, initCode) {\n  helpers_1.assertIsBuffer(from);\n  helpers_1.assertIsBuffer(salt);\n  helpers_1.assertIsBuffer(initCode);\n  assert_1.default(from.length === 20);\n  assert_1.default(salt.length === 32);\n  var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, hash_1.keccak256(initCode)]));\n  return address.slice(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\n\n\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1_1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\n\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  helpers_1.assertIsBuffer(publicKey);\n\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1_1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1_1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\n\nexports.pubToAddress = function (pubKey, sanitize) {\n  if (sanitize === void 0) {\n    sanitize = false;\n  }\n\n  helpers_1.assertIsBuffer(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(secp256k1_1.publicKeyConvert(pubKey, false).slice(1));\n  }\n\n  assert_1.default(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return hash_1.keccak(pubKey).slice(-20);\n};\n\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nexports.privateToPublic = function (privateKey) {\n  helpers_1.assertIsBuffer(privateKey); // skip the type flag and use the X, Y points\n\n  return Buffer.from(secp256k1_1.publicKeyCreate(privateKey, false)).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\n\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\n\n\nexports.importPublic = function (publicKey) {\n  helpers_1.assertIsBuffer(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(secp256k1_1.publicKeyConvert(publicKey, false).slice(1));\n  }\n\n  return publicKey;\n};\n/**\n * Returns the zero address.\n */\n\n\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var addr = bytes_1.zeros(addressLength);\n  return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\n\n\nexports.isZeroAddress = function (hexAddress) {\n  try {\n    helpers_1.assertIsString(hexAddress);\n  } catch (e) {\n    return false;\n  }\n\n  var zeroAddr = exports.zeroAddress();\n  return zeroAddr === hexAddress;\n};","map":{"version":3,"mappings":"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","names":["nonce","balance","stateRoot","codeHash","bn_js_1","constants_1","_validate","Account","accountData","bytes_1","undefined","serialized","values","rlp","decode","Array","isArray","Error","fromValuesArray","lt","length","types_1","encode","raw","equals","isZero","exports","hexAddress","helpers_1","e","test","eip1191ChainId","address","ethjs_util_1","toLowerCase","prefix","chainId","BN","toString","hash","hash_1","ret","i","parseInt","toUpperCase","from","nonceBN","slice","Buffer","toArray","salt","initCode","assert_1","concat","privateKey","secp256k1_1","publicKey","sanitize","pubKey","addressLength","addr","zeroAddr"],"sourceRoot":"","sources":["../src/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}