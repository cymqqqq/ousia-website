{"ast":null,"code":"var _jsxFileName = \"/Users/jackchoi/ousia-website/src/pages/Gallery.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gallery(props) {\n  _s();\n\n  const [totalSupply, setTotalSupply] = useState(null);\n  const [tokenURIs, setTokenURIs] = useState([]); // Get the total number of minted tokens in the contract\n\n  const GetTotalSupply = async () => {\n    if (!props || !props.contract) return;\n    const totalSupply = await props.contract.methods.totalSupply().call(); // totalSupply returns a string\n\n    setTotalSupply(parseInt(totalSupply));\n  }; // Populate the setTokenURIs variable with tokens that are minted.\n\n\n  const GetTokenURIs = async totalSupply => {\n    if (!totalSupply) return;\n    let tokens = []; // Taking advantage of the fact that token IDs are an auto-incrementing integer starting with 1.\n    // Starting with totalSupply and counting down to 1 gives us the tokens in order of most recent.\n\n    for (let idx = totalSupply; idx >= 1; idx--) {\n      try {\n        // Get the metadata URI associated with the token.\n        let tokenURI = await props.contract.methods.tokenURI(idx).call(); // Fetch the json metadata the token points to.\n\n        let response = await fetch(tokenURI);\n        let metaData = await response.json(); // Add the image url if available in the metadata.\n\n        if (metaData && metaData.image) tokens.push(metaData.image);\n      } catch (e) {\n        // Either the contract call or the fetch can fail. You'll want to handle that in production.\n        console.error('Error occurred while fetching metadata.');\n        continue;\n      }\n    } // Update the list of available asset URIs\n\n\n    if (tokens.length) setTokenURIs([...tokens]);\n  }; // Handle contract unavailable. \n  // This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\n\n  if (!props.contract) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page error\",\n    children: \"Contract Not Available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 30\n  }, this); // Attempt to set totalSupply (total number of tokens stored in the contract).\n\n  if (!totalSupply) GetTotalSupply(); // Set up the list of available token URIs when the component mounts.\n\n  if (totalSupply && !tokenURIs.length) GetTokenURIs(totalSupply); // Display the token gallery\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page gallery\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gallery Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), \"Total Supply: \", totalSupply, tokenURIs.map((uri, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: uri,\n        alt: 'token ' + idx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Gallery, \"cr41xI8nEDnhfTjsQfKSCy5XTlU=\");\n\n_c = Gallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"sources":["/Users/jackchoi/ousia-website/src/pages/Gallery.jsx"],"names":["React","useState","Gallery","props","totalSupply","setTotalSupply","tokenURIs","setTokenURIs","GetTotalSupply","contract","methods","call","parseInt","GetTokenURIs","tokens","idx","tokenURI","response","fetch","metaData","json","image","push","e","console","error","length","map","uri"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AAEtC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CAHsC,CAKtC;;AACA,QAAMO,cAAc,GAAG,YAAY;AAClC,QAAG,CAACL,KAAD,IAAU,CAACA,KAAK,CAACM,QAApB,EAA8B;AAC9B,UAAML,WAAW,GAAG,MAAMD,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBN,WAAvB,GAAqCO,IAArC,EAA1B,CAFkC,CAGlC;;AACAN,IAAAA,cAAc,CAACO,QAAQ,CAACR,WAAD,CAAT,CAAd;AACA,GALD,CANsC,CAatC;;;AACA,QAAMS,YAAY,GAAG,MAAOT,WAAP,IAAuB;AAC3C,QAAG,CAACA,WAAJ,EAAiB;AACjB,QAAIU,MAAM,GAAG,EAAb,CAF2C,CAG3C;AACA;;AACA,SAAI,IAAIC,GAAG,GAACX,WAAZ,EAAyBW,GAAG,IAAE,CAA9B,EAAiCA,GAAG,EAApC,EAAuC;AACtC,UAAG;AACF;AACA,YAAIC,QAAQ,GAAG,MAAMb,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBM,QAAvB,CAAgCD,GAAhC,EAAqCJ,IAArC,EAArB,CAFE,CAGF;;AACA,YAAIM,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B;AACA,YAAIG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB,CALE,CAMF;;AACA,YAAGD,QAAQ,IAAIA,QAAQ,CAACE,KAAxB,EACCP,MAAM,CAACQ,IAAP,CAAYH,QAAQ,CAACE,KAArB;AACD,OATD,CASC,OAAME,CAAN,EAAQ;AACR;AACAC,QAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACA;AACA;AACD,KApB0C,CAsB3C;;;AACA,QAAGX,MAAM,CAACY,MAAV,EAAkBnB,YAAY,CAAC,CAAC,GAAGO,MAAJ,CAAD,CAAZ;AAClB,GAxBD,CAdsC,CAwCtC;AACA;;;AACA,MAAG,CAACX,KAAK,CAACM,QAAV,EAAoB,oBAAQ;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR,CA1CkB,CA4CtC;;AACA,MAAG,CAACL,WAAJ,EAAiBI,cAAc,GA7CO,CA+CtC;;AACA,MAAGJ,WAAW,IAAI,CAACE,SAAS,CAACoB,MAA7B,EAAqCb,YAAY,CAACT,WAAD,CAAZ,CAhDC,CAkDtC;;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA;AAAA;AAAA;AAAA,YAFD,oBAGgBA,WAHhB,EAIEE,SAAS,CAACqB,GAAV,CAAc,CAACC,GAAD,EAAMb,GAAN,kBACd;AAAA,6BACC;AAAK,QAAA,GAAG,EAAEa,GAAV;AAAe,QAAA,GAAG,EAAE,WAASb;AAA7B;AAAA;AAAA;AAAA;AAAA;AADD,OAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,YADA,CAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;;GA/DuBb,O;;KAAAA,O","sourcesContent":["import React, { useState } from 'react';\n\nexport default function Gallery(props) {\n\n\tconst [totalSupply, setTotalSupply] = useState(null);\n\tconst [tokenURIs, setTokenURIs] = useState([]);\n\n\t// Get the total number of minted tokens in the contract\n\tconst GetTotalSupply = async () => {\n\t\tif(!props || !props.contract) return;\n\t\tconst totalSupply = await props.contract.methods.totalSupply().call();\n\t\t// totalSupply returns a string\n\t\tsetTotalSupply(parseInt(totalSupply));\n\t};\n\n\t// Populate the setTokenURIs variable with tokens that are minted.\n\tconst GetTokenURIs = async (totalSupply) => {\n\t\tif(!totalSupply) return;\n\t\tlet tokens = [];\n\t\t// Taking advantage of the fact that token IDs are an auto-incrementing integer starting with 1.\n\t\t// Starting with totalSupply and counting down to 1 gives us the tokens in order of most recent.\n\t\tfor(let idx=totalSupply; idx>=1; idx--){\n\t\t\ttry{\n\t\t\t\t// Get the metadata URI associated with the token.\n\t\t\t\tlet tokenURI = await props.contract.methods.tokenURI(idx).call()\n\t\t\t\t// Fetch the json metadata the token points to.\n\t\t\t\tlet response = await fetch(tokenURI);\n\t\t\t\tlet metaData = await response.json();\n\t\t\t\t// Add the image url if available in the metadata.\n\t\t\t\tif(metaData && metaData.image)\n\t\t\t\t\ttokens.push(metaData.image);\n\t\t\t}catch(e){\n\t\t\t\t// Either the contract call or the fetch can fail. You'll want to handle that in production.\n\t\t\t\tconsole.error('Error occurred while fetching metadata.')\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Update the list of available asset URIs\n\t\tif(tokens.length) setTokenURIs([...tokens]);\n\t};\n\n\t// Handle contract unavailable. \n\t// This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\tif(!props.contract) return (<div className=\"page error\">Contract Not Available</div>);\n\t\n\t// Attempt to set totalSupply (total number of tokens stored in the contract).\n\tif(!totalSupply) GetTotalSupply();\n\n\t// Set up the list of available token URIs when the component mounts.\n\tif(totalSupply && !tokenURIs.length) GetTokenURIs(totalSupply);\n\n\t// Display the token gallery\n\treturn (\n\t\t<div className=\"page gallery\">\n\t\t\t<h2>Gallery Page</h2>\n\t\t\t<br/>\n\t\t\tTotal Supply: {totalSupply}\n\t\t\t{tokenURIs.map((uri, idx) => (\n\t\t\t\t<div key={idx}>\n\t\t\t\t\t<img src={uri} alt={'token '+idx} />\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}