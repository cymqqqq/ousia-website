{"ast":null,"code":"var _jsxFileName = \"/Users/jackchoi/ousia-website/src/components/Login.jsx\";\nimport React from \"react\";\nimport Web3 from \"web3\";\nimport ExobitsABI from '../contract/ReExoBits.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Login(props) {\n  const contractAddress = \"0xE7046373c0D9e74529362B0A98F9F7784bF46B4D\";\n\n  const DoConnect = async () => {\n    console.log('Connecting....');\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\"); // Request account access if needed\n\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get an instance of the contract sop we can call our contract functions\n\n      const instance = new web3.eth.Contract(ExobitsABI, contractAddress);\n      props.callback({\n        web3,\n        accounts,\n        contract: instance\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(\"Could not connect to wallet.\", error);\n    }\n  }; // If not connected, display the connect button.\n\n\n  if (!props.connected) return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"login\",\n    onClick: DoConnect,\n    children: \"Connect Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 30\n  }, this); // Display the wallet address. Truncate it to save space.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"[\", props.address.slice(0, 6), \"]\"]\n  }, void 0, true);\n}\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/jackchoi/ousia-website/src/components/Login.jsx"],"names":["React","Web3","ExobitsABI","Login","props","contractAddress","DoConnect","console","log","web3","givenProvider","window","ethereum","request","method","accounts","eth","getAccounts","instance","Contract","callback","contract","error","connected","address","slice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,UAAP,MAAuB,4BAAvB;;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAEpC,QAAMC,eAAe,GAAG,4CAAxB;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAE7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,QAAI;AACH;AACA,YAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACS,aAAL,IAAsB,qBAA/B,CAAb,CAFG,CAGH;;AACA,YAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxB,CAAN,CAJG,CAKH;;AACA,YAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB,CANG,CAOH;;AACA,YAAMC,QAAQ,GAAG,IAAIT,IAAI,CAACO,GAAL,CAASG,QAAb,CAChBjB,UADgB,EAEhBG,eAFgB,CAAjB;AAIAD,MAAAA,KAAK,CAACgB,QAAN,CAAe;AAAEX,QAAAA,IAAF;AAAQM,QAAAA,QAAR;AAAkBM,QAAAA,QAAQ,EAAEH;AAA5B,OAAf;AAEA,KAdD,CAcE,OAAOI,KAAP,EAAc;AACf;AACAf,MAAAA,OAAO,CAACe,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACA;AACD,GArBD,CAJoC,CA2BpC;;;AACA,MAAG,CAAClB,KAAK,CAACmB,SAAV,EAAqB,oBAAO;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAA0B,IAAA,OAAO,EAAEjB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CA5Be,CA8BpC;;AACA,sBAAO;AAAA,oBAAIF,KAAK,CAACoB,OAAN,CAAcC,KAAd,CAAoB,CAApB,EAAsB,CAAtB,CAAJ;AAAA,kBAAP;AACA;KAhCuBtB,K","sourcesContent":["import React from \"react\";\nimport Web3 from \"web3\";\n\nimport ExobitsABI from '../contract/ReExoBits.json';\n\nexport default function Login(props) {\n\n\tconst contractAddress = \"0xE7046373c0D9e74529362B0A98F9F7784bF46B4D\";\n\n\tconst DoConnect = async () => {\n\n\t\tconsole.log('Connecting....');\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n\t\t\t// Request account access if needed\n\t\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' })\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\t// Get an instance of the contract sop we can call our contract functions\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tExobitsABI, \n\t\t\t\tcontractAddress\n\t\t\t);\n\t\t\tprops.callback({ web3, accounts, contract: instance });\n\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\tconsole.error(\"Could not connect to wallet.\", error);\n\t\t}\n\t};\n\n\t// If not connected, display the connect button.\n\tif(!props.connected) return <button className=\"login\" onClick={DoConnect}>Connect Wallet</button>;\n\n\t// Display the wallet address. Truncate it to save space.\n\treturn <>[{props.address.slice(0,6)}]</>;\n}"]},"metadata":{},"sourceType":"module"}