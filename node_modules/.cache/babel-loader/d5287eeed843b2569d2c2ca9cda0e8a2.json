{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsBuffer(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak_1.keccak224(a);\n      }\n\n    case 256:\n      {\n        return keccak_1.keccak256(a);\n      }\n\n    case 384:\n      {\n        return keccak_1.keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak_1.keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsString(a);\n  var buf = Buffer.from(a, 'utf8');\n  return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsHexString(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsArray(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\n\nvar _sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nexports.sha256 = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\n\nexports.sha256FromString = function (a) {\n  helpers_1.assertIsString(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\n\nexports.sha256FromArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return _sha256(a);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar _ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLengthLeft(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  helpers_1.assertIsBuffer(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromString = function (a, padded) {\n  helpers_1.assertIsString(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromArray = function (a, padded) {\n  helpers_1.assertIsArray(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"mappings":"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","names":["createHash","require","exports","a","bits","helpers_1","keccak_1","Error","buf","Buffer","from","bytes_1","_sha256","update","digest","_ripemd160","padded","hash","rlp","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}