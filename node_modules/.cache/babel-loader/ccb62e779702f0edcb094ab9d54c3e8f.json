{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar ethjsUtil = __importStar(require(\"ethjs-util\"));\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label === void 0) {\n      label = false;\n    }\n\n    if (label) {\n      var obj_1 = {};\n\n      self._fields.forEach(function (field) {\n        obj_1[field] = \"0x\" + self[field].toString('hex');\n      });\n\n      return obj_1;\n    }\n\n    return bytes_1.baToJSON(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = bytes_1.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = bytes_1.unpadBuffer(v);\n        assert_1.default(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert_1.default(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = bytes_1.toBuffer(d);\n      });\n    } else if (typeof data === 'object') {\n      var keys_1 = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["exports","self","fields","data","raw","_fields","toJSON","label","obj_1","forEach","field","toString","bytes_1","serialize","rlp","encode","i","push","name","getter","setter","v","allowZero","Buffer","allocUnsafe","allowLess","length","assert_1","Object","defineProperty","enumerable","configurable","get","set","default","alias","from","ethjsUtil","stripHexPrefix","isBuffer","decode","Array","isArray","Error","d","keys_1","keys","indexOf"],"sourceRoot":"","sources":["../src/object.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}