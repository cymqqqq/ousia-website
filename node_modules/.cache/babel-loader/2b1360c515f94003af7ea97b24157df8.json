{"ast":null,"code":"var _jsxFileName = \"/Users/jackchoi/nft-minting-website-example/src/pages/Mint.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // IMPORTANT NOTE: In this example, the URI is used as a unique key to identify\n// a token associated with an asset. This is fine for demonstration, but in a \n// production project you should have a unique key associated with the asset\n// and store that in the contract along with the URI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Mint(props) {\n  _s();\n\n  const [assetURIs, setAssetURIs] = useState([]); // Populate the assetURIs variable with tokens that are not yet minted.\n\n  const CheckAssetURIs = async () => {\n    let uris = []; // For this demo there are only 4 assets, named sequentially. \n\n    for (let idx = 1; idx <= 4; idx++) {\n      let uri = '/token_data/exobit_' + idx + '.json'; // Call the contract and get the id of the uri. If the uri doesn't belong to a token, it will return 0.\n\n      let tokenId = await props.contract.methods.tokenByUri(uri).call(); // The token ID comes in as a string. \"0\" means that uri is not associated with a token.\n\n      if (tokenId === \"0\") uris.push(uri);\n    } // Update the list of available asset URIs\n\n\n    if (uris.length) setAssetURIs([...uris]);\n  }; // Handle the click to mint\n\n\n  const DoMint = async tokenURI => {\n    console.log('minting: ', tokenURI);\n\n    try {\n      // Estimate the gas required for the transaction\n      let gasLimit = await props.contract.methods.CustomMint(tokenURI).estimateGas({\n        from: props.address,\n        value: 100000000000000\n      }); // Call the mint function.\n\n      let result = await props.contract.methods.CustomMint(tokenURI).send({\n        from: props.address,\n        value: 100000000000000,\n        // Setting the gasLimit with the estimate accuired above helps ensure accurate estimates in the wallet transaction.\n        gasLimit: gasLimit\n      }); // Output the result for the console during development. This will help with debugging transaction errors.\n\n      console.log('result', result); // Refresh the gallery\n\n      CheckAssetURIs();\n    } catch (e) {\n      console.error('There was a problem while minting', e);\n    }\n  }; // Handle contract unavailable. \n  // This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\n\n  if (!props.contract) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page error\",\n    children: \"Contract Not Available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 30\n  }, this); // Set up the list of available token URIs when the component mounts.\n\n  if (!assetURIs.length) CheckAssetURIs(); // Display the minting gallery\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page mint\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Click on an image to mint a token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }, this), assetURIs.map((uri, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => DoMint(uri),\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: uri.replace('.json', '.png'),\n        alt: 'exobit_' + (idx + 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 6\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Mint, \"mXSUtxZvvK6nPQs23vvYm73mssY=\");\n\n_c = Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Users/jackchoi/nft-minting-website-example/src/pages/Mint.jsx"],"names":["React","useState","Mint","props","assetURIs","setAssetURIs","CheckAssetURIs","uris","idx","uri","tokenId","contract","methods","tokenByUri","call","push","length","DoMint","tokenURI","console","log","gasLimit","CustomMint","estimateGas","from","address","value","result","send","e","error","map","replace"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n// IMPORTANT NOTE: In this example, the URI is used as a unique key to identify\n// a token associated with an asset. This is fine for demonstration, but in a \n// production project you should have a unique key associated with the asset\n// and store that in the contract along with the URI.\nexport default function Mint(props) {\n\n\tconst [assetURIs, setAssetURIs] = useState([]);\n\n\t// Populate the assetURIs variable with tokens that are not yet minted.\n\tconst CheckAssetURIs = async () => {\n\t\tlet uris = [];\n\n\t\t// For this demo there are only 4 assets, named sequentially. \n\t\tfor(let idx = 1; idx <= 4; idx++ ){\n\t\t\tlet uri = '/token_data/exobit_'+idx+'.json';\n\t\t\t// Call the contract and get the id of the uri. If the uri doesn't belong to a token, it will return 0.\n\t\t\tlet tokenId = await props.contract.methods.tokenByUri(uri).call();\n\t\t\t// The token ID comes in as a string. \"0\" means that uri is not associated with a token.\n\t\t\tif(tokenId === \"0\") uris.push(uri);\n\t\t}\n\n\t\t// Update the list of available asset URIs\n\t\tif(uris.length) setAssetURIs([...uris]);\n\t}\n\n\t// Handle the click to mint\n\tconst DoMint = async (tokenURI) => {\n\t\tconsole.log('minting: ', tokenURI);\n\t\ttry{\n\t\t\t// Estimate the gas required for the transaction\n\t\t\tlet gasLimit = await props.contract.methods.CustomMint(tokenURI).estimateGas(\n\t\t\t\t{ \n\t\t\t\t\tfrom: props.address, \n\t\t\t\t\tvalue: 100000000000000\n\t\t\t\t}\n\t\t\t);\n\t\t\t// Call the mint function.\n\t\t\tlet result = await props.contract.methods.CustomMint(tokenURI)\n\t\t\t\t.send({ \n\t\t\t\t\tfrom: props.address, \n\t\t\t\t\tvalue: 100000000000000,\n\t\t\t\t\t// Setting the gasLimit with the estimate accuired above helps ensure accurate estimates in the wallet transaction.\n\t\t\t\t\tgasLimit: gasLimit\n\t\t\t\t});\n\n\t\t\t// Output the result for the console during development. This will help with debugging transaction errors.\n\t\t\tconsole.log('result', result);\n\n\t\t\t// Refresh the gallery\n\t\t\tCheckAssetURIs();\n\n\t\t}catch(e){\n\t\t\tconsole.error('There was a problem while minting', e);\n\t\t}\n\t};\n\n\t// Handle contract unavailable. \n\t// This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\tif(!props.contract) return (<div className=\"page error\">Contract Not Available</div>);\n\n\t// Set up the list of available token URIs when the component mounts.\n\tif(!assetURIs.length) CheckAssetURIs();\n\n\t// Display the minting gallery\n\treturn (\n\t\t<div className=\"page mint\">\n\t\t\t<h2>Click on an image to mint a token</h2>\n\t\t\t{assetURIs.map((uri, idx) => (\n\t\t\t\t\t<div onClick={() => DoMint(uri)} key={idx}>\n\t\t\t\t\t\t<img src={uri.replace('.json', '.png')} alt={'exobit_'+(idx+1)} />\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t)}\n\t\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}