{"ast":null,"code":"var _jsxFileName = \"/Users/jackchoi/nft-minting-website-example/src/pages/MyTokens.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyTokens(props) {\n  _s();\n\n  const [userTokens, setUserTokens] = useState(null);\n  const [tokenURIs, setTokenURIs] = useState([]); // Populate userTokens with an array of token IDs belonging to the curent wallet address.\n\n  const GetUserTokens = async () => {\n    if (!props || !props.contract) return;\n    const userTokens = await props.contract.methods.tokensOfOwner(props.address).call();\n    setUserTokens(userTokens);\n  }; // Populate the setTokenURIs variable with token URIs belonging to the curent wallet address.\n\n\n  const GetTokenURIs = async userTokens => {\n    if (!userTokens || !userTokens.length) return;\n    let tokens = []; // Taking advantage of the fact that token IDs are an auto-incrementing integer starting with 1.\n    // Starting with userTokens and counting down to 1 gives us the tokens in order of most recent.\n\n    for (let id of userTokens) {\n      try {\n        // Get the metadata URI associated with the token\n        let tokenURI = await props.contract.methods.tokenURI(id).call(); // Fetch the json metadata the token points to\n\n        let response = await fetch(tokenURI);\n        let metaData = await response.json(); // Add the image url if available in the metadata.\n\n        if (metaData && metaData.image) tokens.push(metaData.image);\n      } catch (e) {\n        // Either the contract call or the fetch can fail. You'll want to handle that in production.\n        console.error('Error occurred while fetching metadata.');\n        continue;\n      }\n    } // Update the list of available asset URIs\n\n\n    if (tokens.length) setTokenURIs([...tokens]);\n  }; // Handle contract unavailable. \n  // This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\n\n  if (!props.contract) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page error\",\n    children: \"Contract Not Available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 30\n  }, this); // Get all token IDs associated with the wallet address when the component mounts.\n\n  if (!userTokens) GetUserTokens(); // Set up the list of available token URIs when the component mounts.\n\n  if (userTokens && !tokenURIs.length) GetTokenURIs(userTokens); // Display the personal token gallery\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page my-tokens\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Private Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this), tokenURIs.map((uri, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: uri,\n        alt: 'token ' + idx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MyTokens, \"lRPgc6IjsqAkOy3OmaglQluCmIM=\");\n\n_c = MyTokens;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTokens\");","map":{"version":3,"sources":["/Users/jackchoi/nft-minting-website-example/src/pages/MyTokens.jsx"],"names":["React","useState","MyTokens","props","userTokens","setUserTokens","tokenURIs","setTokenURIs","GetUserTokens","contract","methods","tokensOfOwner","address","call","GetTokenURIs","length","tokens","id","tokenURI","response","fetch","metaData","json","image","push","e","console","error","map","uri","idx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CAHuC,CAKvC;;AACA,QAAMO,aAAa,GAAG,YAAY;AACjC,QAAG,CAACL,KAAD,IAAU,CAACA,KAAK,CAACM,QAApB,EAA8B;AAC9B,UAAML,UAAU,GAAG,MAAMD,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBC,aAAvB,CAAqCR,KAAK,CAACS,OAA3C,EAAoDC,IAApD,EAAzB;AACAR,IAAAA,aAAa,CAACD,UAAD,CAAb;AACA,GAJD,CANuC,CAYvC;;;AACA,QAAMU,YAAY,GAAG,MAAOV,UAAP,IAAsB;AAC1C,QAAG,CAACA,UAAD,IAAe,CAACA,UAAU,CAACW,MAA9B,EAAsC;AACtC,QAAIC,MAAM,GAAG,EAAb,CAF0C,CAG1C;AACA;;AACA,SAAI,IAAIC,EAAR,IAAcb,UAAd,EAAyB;AACxB,UAAG;AACF;AACA,YAAIc,QAAQ,GAAG,MAAMf,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBQ,QAAvB,CAAgCD,EAAhC,EAAoCJ,IAApC,EAArB,CAFE,CAGF;;AACA,YAAIM,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B;AACA,YAAIG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB,CALE,CAMF;;AACA,YAAGD,QAAQ,IAAIA,QAAQ,CAACE,KAAxB,EACCP,MAAM,CAACQ,IAAP,CAAYH,QAAQ,CAACE,KAArB;AACD,OATD,CASC,OAAME,CAAN,EAAQ;AACR;AACAC,QAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACA;AACA;AACD,KApByC,CAsB1C;;;AACA,QAAGX,MAAM,CAACD,MAAV,EAAkBR,YAAY,CAAC,CAAC,GAAGS,MAAJ,CAAD,CAAZ;AAClB,GAxBD,CAbuC,CAuCvC;AACA;;;AACA,MAAG,CAACb,KAAK,CAACM,QAAV,EAAoB,oBAAQ;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR,CAzCmB,CA2CvC;;AACA,MAAG,CAACL,UAAJ,EAAgBI,aAAa,GA5CU,CA8CvC;;AACA,MAAGJ,UAAU,IAAI,CAACE,SAAS,CAACS,MAA5B,EAAoCD,YAAY,CAACV,UAAD,CAAZ,CA/CG,CAiDvC;;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAEEE,SAAS,CAACsB,GAAV,CAAc,CAACC,GAAD,EAAMC,GAAN,kBACd;AAAA,6BACC;AAAK,QAAA,GAAG,EAAED,GAAV;AAAe,QAAA,GAAG,EAAE,WAASC;AAA7B;AAAA;AAAA;AAAA;AAAA;AADD,OAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,YADA,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAUA;;GA5DuB5B,Q;;KAAAA,Q","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function MyTokens(props) {\n\n\tconst [userTokens, setUserTokens] = useState(null);\n\tconst [tokenURIs, setTokenURIs] = useState([]);\n\n\t// Populate userTokens with an array of token IDs belonging to the curent wallet address.\n\tconst GetUserTokens = async () => {\n\t\tif(!props || !props.contract) return;\n\t\tconst userTokens = await props.contract.methods.tokensOfOwner(props.address).call();\n\t\tsetUserTokens(userTokens);\n\t};\n\n\t// Populate the setTokenURIs variable with token URIs belonging to the curent wallet address.\n\tconst GetTokenURIs = async (userTokens) => {\n\t\tif(!userTokens || !userTokens.length) return;\n\t\tlet tokens = [];\n\t\t// Taking advantage of the fact that token IDs are an auto-incrementing integer starting with 1.\n\t\t// Starting with userTokens and counting down to 1 gives us the tokens in order of most recent.\n\t\tfor(let id of userTokens){\n\t\t\ttry{\n\t\t\t\t// Get the metadata URI associated with the token\n\t\t\t\tlet tokenURI = await props.contract.methods.tokenURI(id).call();\n\t\t\t\t// Fetch the json metadata the token points to\n\t\t\t\tlet response = await fetch(tokenURI);\n\t\t\t\tlet metaData = await response.json();\n\t\t\t\t// Add the image url if available in the metadata.\n\t\t\t\tif(metaData && metaData.image)\n\t\t\t\t\ttokens.push(metaData.image);\n\t\t\t}catch(e){\n\t\t\t\t// Either the contract call or the fetch can fail. You'll want to handle that in production.\n\t\t\t\tconsole.error('Error occurred while fetching metadata.')\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Update the list of available asset URIs\n\t\tif(tokens.length) setTokenURIs([...tokens]);\n\t};\n\n\t// Handle contract unavailable. \n\t// This is an extra precaution since the user shouldn't be able to get to this page without connecting.\n\tif(!props.contract) return (<div className=\"page error\">Contract Not Available</div>);\n\n\t// Get all token IDs associated with the wallet address when the component mounts.\n\tif(!userTokens) GetUserTokens();\n\n\t// Set up the list of available token URIs when the component mounts.\n\tif(userTokens && !tokenURIs.length) GetTokenURIs(userTokens);\n\n\t// Display the personal token gallery\n\treturn (\n\t\t<div className=\"page my-tokens\">\n\t\t\t<h2>Private Gallery</h2>\n\t\t\t{tokenURIs.map((uri, idx) => (\n\t\t\t\t<div key={idx}>\n\t\t\t\t\t<img src={uri} alt={'token '+idx} />\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}